namespace demo.translate.conditional_set.example_2
version "${project.version}"

/*
Example 2:

Conditional mapping using "set" with a "when" clause that is predicated on a xml element at the specified xml path exists.

The attribute EngineType->capacityUnit is conditionally set from xml path usEngineType->usEngineSpecification->usEngineDetail->volumeCapacityUnit when there is a value at xml path usEngineType->usEngineSpecification->usEngineDetail->powerUnit.
*/
synonym source CONDITIONAL_SET_EXAMPLE_2

type Root:
    [rootType]
	ukEngineType EngineType (1..1)
	    [synonym CONDITIONAL_SET_EXAMPLE_2 value "usEngineType"]

type EngineType:
	fuelType string (1..1)
	    [synonym CONDITIONAL_SET_EXAMPLE_2 value "combustible" path "usEngineSpecification->usEngineDetail"]
	capacityUnit string (0..1)
	    [synonym CONDITIONAL_SET_EXAMPLE_2 value "volumeCapacityUnit" path "usEngineSpecification->usEngineDetail" set when "usEngineSpecification->usEngineDetail->powerUnit" exists]

/*
Schema:

<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="dataDocument">
        <xs:complexType>
            <xs:all>
                <xs:element name="usEngineType">
                    <xs:complexType>
                        <xs:all>
                            <xs:element name="usEngineSpecification">
                                <xs:complexType>
                                    <xs:all>
                                        <xs:element name="usEngineDetail">
                                            <xs:complexType>
                                                <xs:all>
                                                    <xs:element name="powerUnit" type="xs:string" minOccurs="0"/>
                                                    <xs:element name="volumeCapacityUnit" type="xs:string" minOccurs="0"/>
                                                    <xs:element name="combustible" type="xs:string" minOccurs="0"/>
                                                </xs:all>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:all>
                                </xs:complexType>
                            </xs:element>
                        </xs:all>
                    </xs:complexType>
                </xs:element>
            </xs:all>
        </xs:complexType>
    </xs:element>
</xs:schema>
*/