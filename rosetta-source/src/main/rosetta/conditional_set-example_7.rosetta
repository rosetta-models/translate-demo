namespace demo.translate.conditional_set.example_7
version "${project.version}"

/*
Example 7:

Conditional mapping using "set" with a "when" clause that is predicated on the upstream rosetta path.

- The attribute Z->str3Field is conditionally set from xml element e when the upstream rosetta path is Root->y1Field->zField.
- The attribute Z->str4Field is conditionally set from xml element f when the upstream rosetta path is Root->y2Field->zField.
*/
synonym source CONDITIONAL_SET_EXAMPLE_7

type Root:
    [rootType]
	y1Field Y (1..1)
	    [synonym CONDITIONAL_SET_EXAMPLE_7 value "b" path "a"]
	y2Field Y (1..1)
	    [synonym CONDITIONAL_SET_EXAMPLE_7 value "c" path "a"]

type Y:
	zField Z (1..1)
	    [synonym CONDITIONAL_SET_EXAMPLE_7 value "d"]

type Z:
    str1Field string (1..1)
    	[synonym CONDITIONAL_SET_EXAMPLE_7 value "e" maps 2]
    str2Field string (1..1)
        [synonym CONDITIONAL_SET_EXAMPLE_7 value "f" maps 2]
	str3Field string (0..1)
        [synonym CONDITIONAL_SET_EXAMPLE_7 value "e" set when rosettaPath = Root->y1Field->zField]
	str4Field string (0..1)
	    [synonym CONDITIONAL_SET_EXAMPLE_7 value "f" set when rosettaPath = Root->y2Field->zField]

/*
Schema:

<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="dataDocument">
        <xs:complexType>
            <xs:all>
                <xs:element name="a">
                    <xs:complexType>
                        <xs:all>
                            <xs:element name="b">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="d" type="d"/>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="c">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="d" type="d"/>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                        </xs:all>
                    </xs:complexType>
                </xs:element>
            </xs:all>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="d">
        <xs:all>
            <xs:element name="e" type="xs:string" minOccurs="0" />
            <xs:element name="f" type="xs:string" minOccurs="0" />
        </xs:all>
    </xs:complexType>
</xs:schema>
*/